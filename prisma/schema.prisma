// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)

  accounts Account[]
  sessions Session[]
}

//course contain many units
model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

//a unit contains many chapters 
model Unit {
  id       String    @id @default(cuid())
  name     String
  chapters Chapter[]

  //linking unit with course 
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

//each chapter have multiple question 
model Chapter {
  id   String @id @default(cuid())
  name String

  youtubeSearchQuery String
  videoId            String?

  summary String? @db.VarChar(3000)

  questions Question[]

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId])
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  // question 
  question String @db.VarChar(3000)
  answer   String @db.VarChar(3000)
  options  String @db.VarChar(3000)

  //  linking 
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
